import random
import uuid
# from asyncio.exceptions import
from asyncio import exceptions

import aiogram
from aiogram import executor
from aiogram.types import KeyboardButton, ReplyKeyboardMarkup, ReplyKeyboardRemove
from variables import *
import functions
import asyncio
import asyncpg
from classes import *
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.utils.markdown import link


async def db2_test():
    await db.set_bind(config.POSTGRES_URI)
    # await db.gino.drop_all()
    # await db.gino.create_all()
    # await functions.add_admin(str(uuid.uuid4()), str(720207278))
markup2 = ReplyKeyboardMarkup(resize_keyboard=True)


# @dp.errors_handler(exception=aiogram.utils.exceptions.RetryAfter)
# async def exception_handler(exception: aiogram.utils.exceptions.RetryAfter, id, message, ranges):
#     await send_contacts(id, message, ranges)
#     return True

message1 = 1

@dp.errors_handler(exception=aiogram.utils.exceptions.RetryAfter)
async def exception_handler(update: types.Update, exception: aiogram.utils.exceptions.RetryAfter):
    id = message1.from_user.id
    message1.answer('–¢–∏–º—á–∞—Å–æ–≤–æ –Ω–µ –ø—Ä–∞—Ü—é—î..')
    ranges = functions.dist(message1.location.latitude, message1.location.longitude)
    await bot.send_contact(id, '+38 (050) 632-34-22', '–í–µ—Ç–µ—Ä–∏–Ω–∞—Ä–Ω–∞ –∫–ª—ñ–Ω—ñ–∫–∞ –¥–æ–∫—Ç–æ—Ä–∞ –ú–∞–∫–æ–≤—Å—å–∫–æ—ó')
    await message1.answer(f'–î–æ –ø—Ä–∏—Ç—É–ª–∫—É *{int(ranges[0] * 1000)}* –º', parse_mode='Markdown')
    link1 = link('–ø—Ä–∏—Ç—É–ª–∫—É',
                 'https://www.google.com/maps/dir//47.9899217,34.453125/@48.1964542,34.4612786,10z')
    await bot.send_contact(id, '+38097 780 3090', '–ü—Ä–∏—Ç—É–ª–æ–∫ –¥–ª—è —Ç–≤–∞—Ä–∏–Ω')
    await message1.answer(f'–î–æ {link1} *{int(ranges[1] * 1000)}* –º\n', parse_mode='Markdown')
    link1 = link('–ø—Ä–∏—Ç—É–ª–∫—É',
                 'https://www.google.com/maps/dir//48.44242,35.00094/@48.4091676,34.999787,17z')
    await bot.send_contact(id, '067 771 7047', '–í–µ—Ç–µ—Ä–∏–Ω–∞—Ä–Ω–∞ –∫–ª—ñ–Ω—ñ–∫–∞')
    await message1.answer(f'–î–æ {link1} *{int(ranges[2] * 1000)}* –º', parse_mode='Markdown')
    link1 = link('–ø—Ä–∏—Ç—É–ª–∫—É',
                 'https://www.google.com/maps/dir/48.3908544,35.004025/48.53325,35.0281/@48.46231,34.9702349,12z/data=!3m1!4b1!4m4!4m3!1m1!4e1!1m0')
    await bot.send_contact(id, '068 828 2255', '–ü—Ä–∏—Ç—É–ª–æ–∫ –¥–ª—è —Ç–≤–∞—Ä–∏–Ω')
    await message1.answer(f'–î–æ {link1} *{int(ranges[3] * 1000)}* –º', parse_mode='Markdown')
    return True


async def startup_database():
    print('—É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç—Å—è —Å–≤—è–∑—å —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö')
    await db.set_bind(config.POSTGRES_URI)


@dp.callback_query_handler(lambda call: 'find_shelter' in call.data, state=None)
async def find_shelters(call):
    await FSM.photo.set()
    print(call)
    await bot.send_message(call.from_user.id, '–ë—É–¥—å-–ª–∞—Å–∫–∞ –Ω–∞–¥—ñ—à–ª—ñ—Ç—å —Ñ–æ—Ç–æ —Ç–≤–∞—Ä–∏–Ω–∏')


@dp.message_handler(content_types=['photo'], state=FSM.photo)
async def load_photo(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['photo'] = message.photo[0].file_id
    await message.photo[-1].download(f'C:\\Users\dixoc\Desktop\hackathon\hackathon2\\{data["photo"]}.png')
    await FSM.next()
    await message.reply('–ë—É–¥—å –ª–∞—Å–∫–∞ –≤–∫–∞–∂—ñ—Ç—å –º—ñ—Å—Ç–æ, –¥–µ –±—É–ª–∞ –∑–Ω–∞–π–¥–µ–Ω–∞ —Ç–≤–∞—Ä–∏–Ω–∞')


@dp.message_handler(state=FSM.city)
async def load_city(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['city'] = message.text
    await FSM.next()
    await message.reply('–û–±–µ—Ä—ñ—Ç—å –≤–∏–¥ —Ç–≤–∞—Ä–∏–Ω–∏üê±üê∂', reply_markup=kind_menu)


@dp.callback_query_handler(lambda call: 'cat' in call.data, state=FSM.kind)
async def load_kind1(call, state: FSMContext):
    async with state.proxy() as data:
        data['kind'] = '–ö—ñ—Ç'
    await FSM.next()
    await functions.edit_message(call.message, '–û–±–µ—Ä—ñ—Ç—å —Å—Ç–∞—Ç—å')
    await call.message.edit_reply_markup(sex_menu)


@dp.callback_query_handler(lambda call: 'dog' in call.data, state=FSM.kind)
async def load_kind2(call, state: FSMContext):
    async with state.proxy() as data:
        data['kind'] = '–°–æ–±–∞–∫–∞'
    await FSM.next()
    await functions.edit_message(call.message, '–û–±–µ—Ä—ñ—Ç—å —Å—Ç–∞—Ç—å')
    await call.message.edit_reply_markup(sex_menu)
    # await bot.send_message(call.from_user.id, '–û–±–µ—Ä—ñ—Ç—å —Å—Ç–∞—Ç—å', reply_markup=sex_menu)


@dp.callback_query_handler(lambda call: 'girl' in call.data, state=FSM.sex)
async def load_kex(call, state: FSMContext):
    async with state.proxy() as data:
        data['sex'] = '–î—ñ–≤—á–∏–Ω–∫–∞'
    await FSM.next()
    await functions.edit_message(call.message, '–ë—É–¥—å –ª–∞—Å–∫–∞ –≤–∫–∞–∂—ñ—Ç—å –ø–æ—Ä–æ–¥—É —Ç–≤–∞—Ä–∏–Ω–∏')
    await call.message.edit_reply_markup()


@dp.callback_query_handler(lambda call: 'find_friend' in call.data)
async def find_friend(call):
    pets = random.choice(await functions.select_all_pets())
    with open(pets.photo, 'rb') as photo:
        await bot.send_photo(call.from_user.id, photo=photo, caption=f'*–ú—ñ—Å—Ç–æ*: {pets.city}\n'
                                                                     f'*–¶–µ* - {pets.kind}\n'
                                                                     f'*–°—Ç–∞—Ç—å*: {pets.sex}\n'
                                                                     f'*–ü–æ—Ä–æ–¥–∞:*: {pets.breed}\n'
                                                                     f'*–ö–æ–Ω—Ç–∞–∫—Ç–Ω–∏–π –Ω–æ–º–µ—Ä:*: {pets.contact[:12:]}\n'
                                                                     f'*–ö–æ–Ω—Ç–∞–∫—Ç–Ω–∞ –ª—é–¥–∏–Ω–∞:*: {pets.contact[12::]}')


@dp.callback_query_handler(lambda call: 'boy' in call.data, state=FSM.sex)
async def load_kinsex1(call, state: FSMContext):
    async with state.proxy() as data:
        data['sex'] = '–•–ª–æ–ø—á–∏–∫'
    await FSM.next()
    await functions.edit_message(call.message, '–ë—É–¥—å –ª–∞—Å–∫–∞ –≤–∫–∞–∂—ñ—Ç—å –ø–æ—Ä–æ–¥—É —Ç–≤–∞—Ä–∏–Ω–∏')
    await call.message.edit_reply_markup()


@dp.message_handler(state=FSM.breed)
async def load_breed(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['breed'] = message.text
    await FSM.next()
    await message.answer('–û—Å—Ç–∞–Ω–Ω—ñ–π –∫—Ä–æ–∫üòå: –ù–∞–¥—ñ—à–ª—ñ—Ç—å —Å–≤–æ—ó –∫–æ–Ω—Ç–∞–∫—Ç–∏,'
                         ' —Å–∫–æ—Ä–∏—Å—Ç–∞–≤—à–∏—Å—å –∫–Ω–æ–ø–∫–æ—é –Ω–∏–∂—á–µ,'
                         ' –∞–±–æ –∑–∞ –ø–æ—Ç—Ä–µ–±–∏ –Ω–∞–¥—ñ—à–ª—ñ—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç —ñ–Ω—à–æ—ó –ª—é–¥–∏–Ω–∏'
                         '–Ω–∞–¥—ñ—à–ª—ñ—Ç—å —ñ–Ω—à–∏–π –∫–æ–Ω—Ç–∞–∫—Ç', reply_markup=contact_request)


@dp.message_handler(content_types=['contact'], state=FSM.contact)
async def load_breed(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['contact'] = (message.contact.phone_number, message.contact.first_name)
    async with state.proxy() as data:
        with open(f"C:\\Users\dixoc\Desktop\hackathon\hackathon2\\{data['photo']}.png", 'rb') as photo:
            await bot.send_photo(message.from_user.id, photo, caption=f'*–ú—ñ—Å—Ç–æ*: {data["city"]}\n'
                                                                      f'*–í–∏–¥*: {data["kind"]}\n'
                                                                      f'*–°—Ç–∞—Ç—å*: {data["sex"]}\n'
                                                                      f'*–ü–æ—Ä–æ–¥–∞*: {data["breed"]}\n'
                                                                      f'*–ö–æ–Ω—Ç–∞–∫—Ç–Ω–∏–π –Ω–æ–º–µ—Ä*: {data["contact"][0]}\n'
                                                                      f'*–ö–æ–Ω—Ç–∞–∫—Ç–Ω–µ —ñ–º\'—è*: {data["contact"][1]}', parse_mode='Markdown')
            await functions.add_finded_pet(f"C:\\Users\dixoc\Desktop\hackathon\hackathon2\\{data['photo']}.png",
                                           data["city"], data['kind'], data['sex'], data['breed'],
                                           ''.join(data['contact']))
            # for admin in await functions.select_all_admins():
            #     await bot.send_photo(int(admin.id), photo, caption=f'*–ú—ñ—Å—Ç–æ*: {data["city"]}\n'
            #                                                               f'*–í–∏–¥*: {data["kind"]}\n'
            #                                                               f'*–°—Ç–∞—Ç—å*: {data["sex"]}\n'
            #                                                               f'*–ü–æ—Ä–æ–¥–∞*: {data["breed"]}\n'
            #                                                               f'*–ö–æ–Ω—Ç–∞–∫—Ç–Ω–∏–π –Ω–æ–º–µ—Ä*: {data["contact"][0]}\n'
            #                                                               f'*–ö–æ–Ω—Ç–∞–∫—Ç–Ω–µ —ñ–º\'—è*: {data["contact"][1]}',
            #                      parse_mode='Markdown')
        # await message.reply()
        os.remove(f"C:\\Users\dixoc\Desktop\hackathon\hackathon2\\{data['photo']}.png")
    await state.finish()


@dp.callback_query_handler(lambda call: 'shelters' in call.data)
async def load_kinsex1(call):
    await bot.send_message(call.from_user.id, '–ü–µ—Ä–µ–≥–ª—è–Ω—å—Ç–µ –Ω–∞–π–±–ª–∏–∂—á—ñ –¥–æ –≤–∞—Å –ø—Ä–∏—Ç—É–ª–∫–∏,'
                                              ' –∞–±–æ –∑–∞–º–æ–≤—Ç–µ –∑–≤–æ—Ä–æ—Ç–Ω—ñ–π –¥–∑–≤—ñ–Ω–æ–∫ –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é'
                                              ' –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂—á–µüì≤',
                           reply_markup=markup_requests)


@dp.message_handler(text='/start')
async def starting(message: types.Message):
    await message.answer(f'–ß–∏–º –í–∞–º –¥–æ–ø–æ–º–æ–≥—Ç–∏?‚ò∫Ô∏è', reply_markup=main_menu)


@dp.message_handler(content_types=['location'])
async def start(message: types.Message):
    id = message.from_user.id
    global message1
    message1 = message
    # await message.answer('–¢–∏–º—á–∞—Å–æ–≤–æ –Ω–µ –ø—Ä–∞—Ü—é—î..')
    ranges = functions.dist(message.location.latitude, message.location.longitude)
    # await message.answer('123')
    await bot.send_contact(id, '+38 (050) 632-34-22', '–í–µ—Ç–µ—Ä–∏–Ω–∞—Ä–Ω–∞ –∫–ª—ñ–Ω—ñ–∫–∞ –¥–æ–∫—Ç–æ—Ä–∞ –ú–∞–∫–æ–≤—Å—å–∫–æ—ó')
    await message.answer(f'–î–æ –ø—Ä–∏—Ç—É–ª–∫—É *{int(ranges[0] * 1000)}* –º', parse_mode='Markdown')
    link1 = link('–ø—Ä–∏—Ç—É–ª–∫—É',
                 'https://www.google.com/maps/dir//47.9899217,34.453125/@48.1964542,34.4612786,10z')
    await bot.send_contact(id, '+38097 780 3090', '–ü—Ä–∏—Ç—É–ª–æ–∫ –¥–ª—è —Ç–≤–∞—Ä–∏–Ω')
    await message.answer(f'–î–æ {link1} *{int(ranges[1] * 1000)}* –º\n', parse_mode='Markdown')
    link1 = link('–ø—Ä–∏—Ç—É–ª–∫—É',
                 'https://www.google.com/maps/dir//48.44242,35.00094/@48.4091676,34.999787,17z')
    await bot.send_contact(id, '067 771 7047', '–í–µ—Ç–µ—Ä–∏–Ω–∞—Ä–Ω–∞ –∫–ª—ñ–Ω—ñ–∫–∞')
    await message.answer(f'–î–æ {link1} *{int(ranges[2] * 1000)}* –º', parse_mode='Markdown')
    link1 = link('–ø—Ä–∏—Ç—É–ª–∫—É',
                 'https://www.google.com/maps/dir/48.3908544,35.004025/48.53325,35.0281/@48.46231,34.9702349,12z/data=!3m1!4b1!4m4!4m3!1m1!4e1!1m0')
    await bot.send_contact(id, '068 828 2255', '–ü—Ä–∏—Ç—É–ª–æ–∫ –¥–ª—è —Ç–≤–∞—Ä–∏–Ω')
    await message.answer(f'–î–æ {link1} *{int(ranges[3] * 1000)}* –º', parse_mode='Markdown')
    # try:
    #     await send_contacts(id, message, ranges)
    # except Exception as ex:
    #     await exception_handler(exception=ex, id=id, message=message, ranges=ranges)


@dp.message_handler(content_types=['contact'])
async def remove(message: types.Message):
    await message.answer(f'–î—è–∫—É—î–º–æ –∑–∞ –∑–≤–µ—Ä–Ω–µ–Ω–Ω—è!ü§ó –ù–∞–π–±–ª–∏–∂—á–∏–º —á–∞—Å–æ–º –∑ –í–∞–º–∏ –∑–≤\'—è–∂–µ—Ç—å—Å—è –º–µ–Ω–µ–¥–∂–µ—Ä –∑–∞ –¥–∞–Ω–∏–º–∏:\n'
                         f'*–ù–æ–º–µ—Ä*: {message.contact.phone_number}\n'
                         f'*–Ü–º\'—è*: {message.contact.first_name}', parse_mode='Markdown',
                         reply_markup=ReplyKeyboardRemove())


async def on_startup(dp: dp):
    await functions.set_default_commands(dp)
    print('–±–æ—Ç –∑–∞–ø—É—â–µ–Ω')


async def create_db_pool():
    bot.pg_con = await asyncpg.create_pool(database=config.DATABASE,
    user=config.PGUSER,
    password=config.PGPASSWORD,
    max_inactive_connection_lifetime=100)


loop = asyncio.get_event_loop()
loop.run_until_complete(db2_test())


if __name__ == '__main__':
    try:
        executor.start_polling(dp, on_startup=on_startup)
    except Exception as ex:
        print(ex)
        executor.start_polling(dp, on_startup=on_startup)
